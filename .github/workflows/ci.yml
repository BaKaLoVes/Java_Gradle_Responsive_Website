name: CI Pipeline

# Trigger the workflow on push or pull request to main and development branches
on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development

jobs:
  build:
    runs-on: windows-latest  # Specify Windows environment for PowerShell commands

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: main  # Ensure it's checking out the 'main' branch
      - run: echo "Checkout successful!"

      # Build the project using Gradle
      - name: Build with Gradle
        run: |
          ./gradlew.bat clean build
        shell: powershell
      - run: echo "Build successful!" if: success()
      - run: echo "Build failed!" if: failure()

      # Run the tests
      - name: Run tests with Gradle
        run: |
          ./gradlew.bat test
        shell: powershell
      - run: echo "Tests executed successfully!" if: success()
      - run: echo "Tests execution failed!" if: failure()

      # Build Docker image and push to Docker Hub
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Store Docker Hub username in GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # Store Docker Hub password in GitHub Secrets

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/responsive-web:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/responsive-web:latest

      - run: echo "Docker image built and pushed successfully!" if: success()
      - run: echo "Docker build or push failed!" if: failure()

      # Deploy to a remote server (optional)
      - name: Deploy to Server
        if: github.ref == 'refs/heads/main'
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          docker pull ${{ secrets.DOCKER_USERNAME }}/responsive-web:latest
          docker stop my_app || true
          docker rm my_app || true
          docker run -d --name my_app -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/responsive-web:latest
          EOF
      - run: echo "Deployment successful!" if: success()
      - run: echo "Deployment failed!" if: failure()

      # Post build actions (e.g., clean up)
      - name: Clean up workspace
        run: |
          git clean -fdx  # Removes all untracked files and directories
        shell: bash
      - run: echo "Cleaning up workspace"
